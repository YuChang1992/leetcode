#由左至右，邊遍歷邊把乘積存下供之後使用
#再從右至左

class Solution:
	def productExceptSelf(self, nums: List[int]) -> List[int]:

		output = [1] * len(nums)  #定義一個都是1的列表，長度跟nums一樣[1,1,1,1...]

		for i in range(len(nums)):
			output[i] = math.prod(nums[:i]) * math.prod(nums[i+1:])
			#math.prod計算乘積，當前位置以外的所有數字，從一開始到當前位置，乘上當前位置到最後的位置
  		return output  #回傳列表



class Solution:
	def productExceptSelf(self, nums: List[int]) -> List[int]:

		output = [1] * len(nums)  #定義一個都是1的列表，長度跟nums一樣[1,1,1,1...]

		#算左到右的乘積
		for i in range(1,len(nums)):  #遍歷每個位置，第0位不用，起始從第1位開始
			output[i] = output[i-1] * nums[i-1]
			#更新output，是當前output前一個值乘上當前nums前一個值

		right_product = nums[-1]  #定義一個從右邊開始要乘的變數，起始值從nums最後1位開始

		#算右到左的乘積
		for i in range(len(nums) - 2, -1, -1):  #遍歷每個位置，起始倒數第2位開始，到第0位置，每次少一位(往左一位)
			output[i] *= right_product  #更新output，當前output的值乘上要乘的數
			right_product *= nums[i]  #更新要乘的數，要乘的數乘上當前nums的數
		return output  #回傳列表




