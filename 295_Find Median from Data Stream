#import heapq#引用全部模組
from heapq import heappush, heappop  #引用部分模組

class MedianFinder:

    def __init__(self):

		self.max_heap = []  #最大堆，存放左半邊數字較小的
		self.min_heap = []  #最小堆，存放右半邊數字較大的
        
    def addNum(self, num: int) -> None:

		#Python的heapq模組實現的是最小堆(Min Heap)，也就是越上面數值越小的
		#為了實現最大堆的效果，需要對要插入的數字進行反向處理
		#假設預設空[]，依序插入1, 3, 5，在heapq中越小值在越上面變成[-1, -3, -5]

		if not self.max_heap or -self.max_heap[0] > num:
		#如果最大堆是空的 或 目前要加入的數字小於最大堆的最大值(放入時是負數，變回正數比較)
			heappush(self.max_heap, -num)  #將數字變成負數加入最大堆
		else:
			heappush(self.min_heap, num)  #將數字加入最小堆

		#平衡最大堆跟最小堆存放數字的數量
		if len(self.max_heap) > len(self.min_heap) + 1:  #如果最大堆存放的數量大於最小堆存放的數量加1
			heappush(self.min_heap, -heappop(self.max_heap))  #將最大堆的頂元素(最大值)變回正數移到最小堆
		elif len(self.max_heap) < len(self.min_heap):  #如果最大堆存放的數量小於最小堆存放的數量
			heappush(self.max_heap, -heappop(self.min_heap))  #將最小堆的頂元素(最小值)變成負數移到最大堆
			
	def findMedian(self) -> float:

		if len(self.max_heap) == len(self.min_heap):  #如果最大堆存放的數量等於最小堆存放的數量
			return (-self.max_heap[0] + self.min_heap[0]) / 2  #中位數為最大堆跟最小堆的頂元素相加除2
		else:  #如果存放的數量不相等
			return - self.max_heap[0]  #中位數為最大堆的頂元素
        


# Your MedianFinder object will be instantiated and called as such:
# obj = MedianFinder()
# obj.addNum(num)
# param_2 = obj.findMedian()